import pg from 'pg';
import dotenv from 'dotenv';

dotenv.config(); // Cho ph√©p s·ª≠ d·ª•ng file .env khi dev local

const { Pool } = pg;

const connectionString = process.env.DATABASE_URL;

if (!connectionString) {
  console.error('üî¥ DATABASE_URL kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p, h√£y check/thi·∫øt l·∫≠p l·∫°i file .env');
  // Ch·ªâ tho√°t n·∫øu kh√¥ng ph·∫£i m√¥i tr∆∞·ªùng Railway/production
  if (process.env.NODE_ENV !== 'production' && !process.env.RAILWAY_ENVIRONMENT) {
    process.exit(1);
  }
}

const pool = new Pool({
  connectionString,
  // SSL b·∫Øt bu·ªôc cho k·∫øt n·ªëi t·ªõi DB tr√™n Railway t·ª´ b√™n ngo√†i network c·ªßa Railway
  // Ho·∫∑c n·∫øu app v√† DB c√πng project tr√™n Railway, SSL c√≥ th·ªÉ kh√¥ng c·∫ßn thi·∫øt.
  // ƒê·ªÉ an to√†n v√† t∆∞∆°ng th√≠ch nhi·ªÅu tr∆∞·ªùng h·ª£p, n√™n b·∫≠t cho production.
  ssl: process.env.NODE_ENV === 'production' || process.env.RAILWAY_ENVIRONMENT ? { rejectUnauthorized: false } : false,
});

pool.on('connect', () => {
  console.log('üü¢ ƒê√£ k·∫øt n·ªëi t·ªõi PostgreSQL database!');
});

pool.on('error', (err) => {
  console.error('üî¥ Unexpected error v·ªõi idle client', err);
  process.exit(-1); // Tho√°t n·∫øu c√≥ l·ªói nghi√™m tr·ªçng v·ªõi pool
});

const initializeDb = async () => {
  let client;
  try {
    client = await pool.connect();
    await client.query(`
      CREATE TABLE IF NOT EXISTS guestbook_entries (
        id SERIAL PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        message TEXT NOT NULL,
        language VARCHAR(2) NOT NULL,
        timestamp TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
      );
    `);
    console.log('‚ú® B·∫£ng "guestbook_entries" ƒë√£ ƒë∆∞·ª£c chu·∫©n b·ªã !');
  } catch (err) {
    console.error('üî¥ Error v·ªõi database table:', err);
    // N·∫øu ƒëang trong m√¥i tr∆∞·ªùng Railway/production v√† kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c DB th√¨ l√† v·∫•n ƒë·ªÅ l·ªõn
    if (process.env.NODE_ENV === 'production' || process.env.RAILWAY_ENVIRONMENT) {
        throw err; // N√©m l·ªói ƒë·ªÉ server kh√¥ng kh·ªüi ƒë·ªông n·∫øu DB kh√¥ng s·∫µn s√†ng
    }
  } finally {
    if (client) client.release();
  }
};

export { pool, initializeDb };